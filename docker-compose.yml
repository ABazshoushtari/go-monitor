version: "3.8"
services:
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - app-net
  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    ports:
      - '3000:3000'
    networks:
      - app-net
    volumes:
      - grafana-storage:/var/lib/grafana

  postgres-service:
    image: postgres:15.3-alpine3.18
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/db.sql:/docker-entrypoint-initdb.d/db.sql
    networks:
      - app-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  app:
    image: h0si/cc-project-k8s
    ports:
      - "1323:1323"
    environment:
      APP_PORT: 1323
      DB_WRITE_USERNAME: postgres
      DB_WRITE_PASSWORD: postgres
      DB_READ_USERNAME: postgres
      DB_READ_PASSWORD: postgres
    depends_on:
      postgres-service:
          condition: service_healthy
    volumes:
      - ./config.yaml:/app/config.yaml
    networks:
      - app-net
    restart: always
volumes:
  pgdata:
  grafana-storage:
  prometheus_data: { }
networks:
  app-net:
    driver: bridge
